#!/opt/eduid/bin/python
#
# Nagios check performing monitoring of eduID MFA API
#

import os
import sys
import hmac
import json
import jose
import time
import struct
import hashlib
import logging
import argparse
import requests
try:
    import configparser
except ImportError:
    # Python 2
    import ConfigParser as configparser

# Nagios plugin exit status codes
STATUS = {'OK': 0,
          'WARNING': 1,
          'CRITICAL': 2,
          'UNKNOWN': 3,
          }


def parse_args():
    """
    Parse the command line arguments
    """
    parser = argparse.ArgumentParser(description = "eduID MFA Auth Nagios plugin",
                                     add_help = True,
                                     formatter_class = argparse.ArgumentDefaultsHelpFormatter,
                                     )
    parser.add_argument('-H', '--host',
                        dest='host',
                        help='Host address to connect to',
                        metavar='HOST',
                        )
    parser.add_argument('-M', '--mode',
                        dest='mode',
                        help='Mode of operation (init | auth)',
                        metavar='MODE',
                        )
    parser.add_argument('-c', '--ini',
                        dest='ini',
                        default='/etc/nagios/plugins.ini',
                        help='INI config file to load data from',
                        metavar='FILE',
                        )
    parser.add_argument('-s', '--section',
                        dest='section',
                        default='mfaapi',
                        help='INI config section to load data from',
                        metavar='NAME',
                        )
    parser.add_argument('--debug',
                        dest='debug',
                        action='store_true', default=False,
                        help='Enable debug operation'
                        )
    parser.add_argument('--code',
                        dest='code',
                        default=None,
                        help='OATH code to use (default: auto)',
                        metavar='CODE',
                        )

    args = parser.parse_args()
    load_config(args)
    return args


def load_config(args):
    _defaults = {'add_url': 'https://localhost:8511/mfa_add',
                 'auth_url': 'https://localhost:8511/mfa_auth',
                 'server_cert_file': 'server.pem',
                 'client_key_file': 'client.key',
                 'issuer': 'MFA API Nagios TestIssuer',
                 'account': 'user@example.org',
                 'digits': '6',
                 'hmac_key': None,
                 'user_id': None,
                 }
    config = configparser.ConfigParser(_defaults)
    if not config.read(args.ini):
        sys.stderr.write('Failed loading config file: {!r}\n'.format(args.ini))
        sys.exit(STATUS['UNKNOWN'])

    nosectionwarn = 0

    for key in _defaults.keys():
        value = _defaults[key]
        try:
            value = config.get(args.section, key)
        except configparser.NoSectionError:
            if not nosectionwarn:
                sys.stderr.write("Warning: No section {!r} in INI file {!r}\n".format(args.section, args.ini))
                nosectionwarn = 1
            pass

        if not hasattr(args, key) or not getattr(args, key):
            setattr(args, key, value)


def get_logger(args):
    level = logging.INFO
    if args.debug:
        level = logging.DEBUG
    logging.basicConfig(level = level, stream = sys.stderr,
                        format='%(asctime)s: %(levelname)s %(message)s')
    logger = logging.getLogger('check_eduid_mfaapi')
    return logger


class Keys(object):
    """
    Object to hold the keys that need to be passed around.
    """
    def __init__(self, server_cert_file, client_key_file):
        with open(args.server_cert_file) as fd:
            self.server_cert = {'k': fd.read(), }
        with open(args.client_key_file) as fd:
            self.private_key = {'k': fd.read(), }


def main(args, logger):
    keys = Keys(args.server_cert_file, args.client_key_file)

    if args.mode == 'init':
        return mfa_add(keys, args, logger)
    elif args.mode == 'auth':
        return mfa_auth(keys, args, logger)

    logger.error('Unknown mode: {!r}'.format(args.mode))
    sys.exit(STATUS['UNKNOWN'])


def mfa_add(keys, args, logger):
    """
    Test the authentication API endpoint.
    :param keys: Loaded JWK keys
    :param args: Arguments and configuration
    :param logger: Logging logger
    :type keys: Keys
    :type logger: logging.logger
    :return: True, or does not return at all
    """
    claims = {'version': 1,
              'token_type': 'OATH',
              'OATH': {'digits': int(args.digits),
                       'issuer': args.issuer,
                       'account': args.account,
                       }
              }
    response = send_claims(claims, args.add_url, keys, args, logger)
    logger.debug('Add got response: {!s}'.format(response))
    if type(response) == dict and response.get('status') == 'OK':
        sys.stderr.write('Settings:\n[{section:s}]\nuser_id = {user_id:s}\nhmac_key = {hmac_key:s}\n\n'.format(
            section = args.section,
            user_id = response['OATH']['user_id'],
            hmac_key = response['OATH']['hmac_key'],
        ))
        print('OK, created user with user_id {!r}'.format(response['OATH']['user_id']))
        return True
    print ('NOT OK: {!s}'.format(response))


def mfa_auth(keys, args, logger):
    """
    Test the authentication API endpoint.
    :param keys: Loaded JWK keys
    :param args: Arguments and configuration
    :param logger: Logging logger
    :type keys: Keys
    :type logger: logging.logger
    :return: True, or does not return at all
    """
    if args.code is None:
        totp_counter = int(time.time()) / 30
        code = oath_code(args.hmac_key, totp_counter)

        logger.debug('Calculated code {!s} for TOTP counter {!s} (HMAC {!r})'.format(code, totp_counter, args.hmac_key))
    else:
        totp_counter = 'manual'
        code = args.code

    claims = {'version': 1,
              'token_type': 'OATH',
              'OATH': {'user_id': args.user_id,
                       'user_code': code,
                       }
              }
    response = send_claims(claims, args.auth_url, keys, args, logger)
    logger.debug('Auth got response: {!s}'.format(response))
    if type(response) == dict and response.get('status') == 'OK':
        print('OK, user {!s} authenticated with code {!s} for OATH TOTP counter {!s}'.format(
            args.user_id, code, totp_counter))
        return True
    print ('NOT OK: {!s}'.format(response))


def send_claims(claims, url, keys, args, logger):
    """
    Create a JWT and send it to an API endpoint URL.

    :param claims:
    :param url:
    :param keys: Loaded JWK keys
    :param args: Arguments and configuration
    :param logger: Logging logger
    :type keys: Keys
    :type logger: logging.logger
    :return: JWT from response
    """
    claims['nonce'] = os.urandom(10).encode('hex')

    if args.debug:
        sys.stderr.write(json.dumps(claims, sort_keys=True, indent=4) + '\n')

    jwe = sign_and_encrypt(claims, keys, logger)

    logger.debug("Encrypted using JWK:\n{!r}\n\nResulting JWE:\n{!r}".format(keys.server_cert, jwe))
    logger.debug("Serialized:\n{!r}".format(jose.serialize_compact(jwe)))

    logger.debug("-" * 80)
    logger.debug("POSTing request to {!r}\n\n".format(url))

    r = requests.post(url, data=dict(request=jose.serialize_compact(jwe)))

    logger.debug("Response from server: {!r}\n".format(r))
    logger.debug(r.text)
    logger.debug("-" * 80)

    if r.status_code != 200:
        return 'Got {!s} {!s} from {!s}'.format(r.status_code, r.reason, url)
    jwt = decrypt_and_verify(r.text, keys, logger)

    logger.debug("Extracted and pretty-printed claims from JWT:\n{!s}".format(
        json.dumps(jwt.claims, sort_keys=True, indent=4)))

    return jwt.claims


def oath_code(hmac_key, counter, length = 6):
    """
    Calculate the OATH key for a given hmac_key and counter value.
    :param hmac_key: string
    :param counter: the current OATH counter value
    :param length: Number of digits in code, 6 or 8

    :type hmac_key: str | unicode
    :type counter: int
    :type length: int
    :return: OATH code as string
    :rtype: str | unicode
    """
    counter = struct.pack('>Q', counter)
    hmac_result = hmac.new(hmac_key.decode('hex'), counter, hashlib.sha1).digest()
    code = oath_truncate(hmac_result, length = length)
    fmt = '{{:0{!s}d}}'.format(length)  # leading zero padding
    code_str = fmt.format(code)
    return code_str


def oath_truncate(hmac_result, length=6):
    assert(len(hmac_result) == 20)
    offset = ord(hmac_result[19]) & 0xf
    bin_code = (ord(hmac_result[offset]) & 0x7f) << 24 \
               | (ord(hmac_result[offset + 1]) & 0xff) << 16 \
               | (ord(hmac_result[offset + 2]) & 0xff) << 8 \
               | (ord(hmac_result[offset + 3]) & 0xff)
    return bin_code % (10 ** length)


def sign_and_encrypt(claims, keys, logger, alg = 'RS256'):
    """
    Decrypt a response and verify it's signature.

    :param claims: Dict with the data to send
    :param keys: Loaded JWK keys
    :param logger: Logging logger
    :param alg: JOSE algorithm to use
    :type claims: dict
    :type keys: Keys
    :type logger: logging.logger
    :type alg: str | unicode
    :return: JWE
    """
    jws = jose.sign(claims, keys.private_key, alg=alg)
    logger.debug("JWS before serialization:\n{!r}".format(jws))
    signed_claims = {'v1': jose.serialize_compact(jws)}
    logger.debug("Signed claims:\n{!r}".format(signed_claims))
    jwe = jose.encrypt(signed_claims, keys.server_cert)
    return jwe


def decrypt_and_verify(plaintext, keys, logger, alg = 'RS256'):
    """
    Decrypt a response and verify it's signature.
    :param plaintext:
    :param keys: Loaded JWK keys
    :param logger: Logging logger
    :param alg: JOSE algorithm to use
    :type plaintext: str | unicode
    :type keys: Keys
    :type logger: logging.logger
    :type alg: str | unicode
    :return: JWT
    """
    jwe = jose.deserialize_compact(plaintext.replace("\n", ''))
    decrypted = jose.decrypt(jwe, keys.private_key)
    logger.debug("Decrypted {!r}\n\n".format(decrypted))
    if 'v1' not in decrypted.claims:
        logger.info("No 'v1' in decrypted claims: {!r}\n\n".format(decrypted))
        return False
    to_verify = jose.deserialize_compact(decrypted.claims['v1'])
    logger.debug("Decrypted claims to verify: {!r}\n\n".format(to_verify))

    jwt = jose.verify(to_verify, keys.server_cert, alg=alg)
    logger.debug("Good signature on request using key:\n{!r}\n\n{!r}\n\n".format(
        keys.server_cert, jwt
    ))
    return jwt


if __name__ == '__main__':
    logger = None
    try:
        args = parse_args()
        logger = get_logger(args)
        res = main(args, logger)
        if res:
            sys.exit(STATUS['OK'])
        sys.exit(STATUS['UNKNOWN'])
    except KeyboardInterrupt:
        pass

